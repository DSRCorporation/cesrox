[Error]
enum CesrError {
    "SerializationError",
    "JSONSerializationError",
    "CBORSerializationError",
    "MsgPackSerializationError",
    "IntegerParseValue",
    "SemanticError",
    "FaultySignatureVerification",
    "EventOutOfOrderError",
    "EventDuplicateError",
    "NotEnoughSigsError",
    "SignatureVerificationError",
    "DeserializeError",
    "NotIndexedError",
    "IdentifierPresentError",
    "Base64DecodingError",
    "ImproperPrefixType",
    "StorageError",
    "InvalidIdentifierStat",
    "MutArcKeyVaultError",
    "Ed25519DalekSignatureError",
    "MutexPoisoned",
    "IncorrectDigest",
    "StreamDeserializationError",
    "NotImplementedError",
    "EmptyBytesStream",
    "NotExist",
    "InvalidState",
    "Incomplete",
};

enum Basic {
    "ECDSAsecp256k1NT",
    "ECDSAsecp256k1",
    "Ed25519NT",
    "Ed25519",
    "Ed448NT",
    "Ed448",
    "X25519",
    "X448",
};

dictionary BasicPrefix {
  Basic derivation;
  string key;
};

interface BasicPrefix {
  [Name=from_str, Throws=CesrError]
  constructor([ByRef] string s);
  string to_str();
};

interface SelfAddressingPrefix {
  [Name=from_str, Throws=CesrError]
  constructor([ByRef] string s);
  string to_str();
};

interface SelfSigningPrefix {
  [Name=from_str, Throws=CesrError]
  constructor([ByRef] string s);
  string to_str();
};

interface CesrMessage {
  [Name=from_str, Throws=CesrError]
  constructor([ByRef] string s);
  string to_str();
};

[Custom]
typedef string CustomMessage;

enum CesrMessage {
  "BasicPrefix",
  "SelfAddressingPrefix",
  "SelfSigningPrefix",
};

[Enum]
interface Message {
  CustomMessage(CustomMessage value);
  CesrMessage(CesrMessage value);
};

// enum Message {
//   "CustomMessage",
//   "CesrMessage",
// };

// dictionary FFIMessageListReturn {
//   u64 rest;
//   sequence<Message> list;
// };

dictionary TypeOneType {
  u8 value;
};

dictionary TypeTwoType {
  u8 one;
  string two;
};

[Enum]
interface TestEnum {
  TypeOne(TypeOneType value);
  TypeTwo(TypeTwoType value);
};

interface MessageList {
  [Throws=CesrError]
  sequence<u8> to_stream();
};

namespace cesrox {
  // [Throws=CesrError]
  // FFIMessageListReturn parse_message_list([ByRef] sequence<u8> bytes);
};
