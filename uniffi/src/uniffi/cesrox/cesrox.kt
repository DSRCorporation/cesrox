// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.cesrox;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_cesrox_daf_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_cesrox_daf_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "cesrox_uniffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "cesrox")
            
        }
    }

    fun cesrox_daf_dater_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_code(`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_size(`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Int

    fun cesrox_daf_dater_raw(`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_qb64(`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_qb64b(`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_dater_qb2(`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_code(`seqner`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_size(`seqner`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Int

    fun cesrox_daf_seqner_raw(`seqner`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_qb64(`seqner`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_qb64b(`seqner`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seqner_qb2(`seqner`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_code(`diger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_size(`diger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Int

    fun cesrox_daf_diger_raw(`diger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_qb64(`diger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_qb64b(`diger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_diger_qb2(`diger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_code(`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_size(`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Int

    fun cesrox_daf_saider_raw(`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_qb64(`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_qb64b(`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_saider_qb2(`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_new_with_code_and_raw(`verfer`: RustBuffer.ByValue,`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_new_with_qb64(`verfer`: RustBuffer.ByValue,`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_new_with_qb64b(`verfer`: RustBuffer.ByValue,`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_new_with_qb2(`verfer`: RustBuffer.ByValue,`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_code(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_size(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Int

    fun cesrox_daf_cigar_raw(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_qb64(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_qb64b(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_cigar_qb2(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,`transferable`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_new_with_qb64(`qb64`: RustBuffer.ByValue,`transferable`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_new_with_qb64b(`qb64b`: RustBuffer.ByValue,`transferable`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_new_with_qb2(`qb2`: RustBuffer.ByValue,`transferable`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_code(`signer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_size(`signer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Int

    fun cesrox_daf_signer_raw(`signer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_qb64(`signer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_qb64b(`signer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_signer_qb2(`signer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,`index`: Int,`ondex`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_code(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_raw(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_qb64(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_qb64b(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_siger_qb2(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_code(`prefixer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_raw(`prefixer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_qb64(`prefixer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_qb64b(`prefixer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_prefixer_qb2(`prefixer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_new_with_code_and_raw(`code`: RustBuffer.ByValue,`raw`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_new_with_qb64(`qb64`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_new_with_qb64b(`qb64b`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_new_with_qb2(`qb2`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_code(`verfer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_raw(`verfer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_qb64(`verfer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_qb64b(`verfer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_verfer_qb2(`verfer`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_message_from_stream_bytes(`bytes`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_message_list_from_stream_bytes(`bytes`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_attached_material_quadlets_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_attached_material_quadlets_qb64(`attachedMaterialQuadlets`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_attached_material_quadlets_qb64b(`attachedMaterialQuadlets`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_attached_material_quadlets_qb2(`attachedMaterialQuadlets`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_controller_idx_sig_create(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_controller_idx_sigs_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_controller_idx_sigs_qb64(`controllerIdxSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_controller_idx_sigs_qb64b(`controllerIdxSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_controller_idx_sigs_qb2(`controllerIdxSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_first_seen_replay_couple_create(`firner`: RustBuffer.ByValue,`dater`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_first_seen_replay_couples_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_first_seen_replay_couples_qb64(`firstSeenReplayCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_first_seen_replay_couples_qb64b(`firstSeenReplayCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_first_seen_replay_couples_qb2(`firstSeenReplayCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_non_trans_receipt_couple_create(`cigar`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_non_trans_receipt_couples_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_non_trans_receipt_couples_qb64(`nonTransReceiptCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_non_trans_receipt_couples_qb64b(`nonTransReceiptCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_non_trans_receipt_couples_qb2(`nonTransReceiptCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_pathed_material_quadlet_create(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_pathed_material_quadlets_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_pathed_material_quadlets_qb64(`pathedMaterialQuadlets`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_pathed_material_quadlets_qb64b(`pathedMaterialQuadlets`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_pathed_material_quadlets_qb2(`pathedMaterialQuadlets`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sig_create(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sigs_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sigs_qb64(`sadPathSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sigs_qb64b(`sadPathSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sigs_qb2(`sadPathSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sig_group_create(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sig_groups_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sig_groups_qb64(`sadPathSigGroup`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sig_groups_qb64b(`sadPathSigGroup`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_sad_path_sig_groups_qb2(`sadPathSigGroup`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seal_source_couple_create(`seqner`: RustBuffer.ByValue,`saider`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seal_source_couples_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seal_source_couples_qb64(`sealSourceCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seal_source_couples_qb64b(`sealSourceCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_seal_source_couples_qb2(`sealSourceCouples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_idx_sig_group_create(`prefixer`: RustBuffer.ByValue,`seqner`: RustBuffer.ByValue,`saider`: RustBuffer.ByValue,`isigers`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_idx_sig_groups_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_idx_sig_groups_qb64(`transIdxSigGroups`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_idx_sig_groups_qb64b(`transIdxSigGroups`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_idx_sig_groups_qb2(`transIdxSigGroups`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_last_idx_sig_group_create(`prefixer`: RustBuffer.ByValue,`isigers`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_last_idx_sig_groups_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_last_idx_sig_groups_qb64(`transLastIdxSigGroups`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_last_idx_sig_groups_qb64b(`transLastIdxSigGroups`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_last_idx_sig_groups_qb2(`transLastIdxSigGroups`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_receipt_quadruple_create(`prefixer`: RustBuffer.ByValue,`seqner`: RustBuffer.ByValue,`saider`: RustBuffer.ByValue,`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_receipt_quadruples_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_receipt_quadruples_qb64(`transReceiptQuadruples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_receipt_quadruples_qb64b(`transReceiptQuadruples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_trans_receipt_quadruples_qb2(`transReceiptQuadruples`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_witness_ids_sig_create(`siger`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_witness_ids_sigs_create(`value`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_witness_ids_sigs_qb64(`witnessIdsSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_witness_ids_sigs_qb64b(`witnessIdsSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_witness_ids_sigs_qb2(`witnessIdsSigs`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_matter_codex_code(`codex`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun cesrox_daf_indexer_codex_code(`codex`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_cesrox_daf_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_cesrox_daf_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_cesrox_daf_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_cesrox_daf_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}




data class AttachedMaterialQuadlets (
    var `value`: List<CesrGroup>
) {
    
}

public object FfiConverterTypeAttachedMaterialQuadlets: FfiConverterRustBuffer<AttachedMaterialQuadlets> {
    override fun read(buf: ByteBuffer): AttachedMaterialQuadlets {
        return AttachedMaterialQuadlets(
            FfiConverterSequenceTypeCesrGroup.read(buf),
        )
    }

    override fun allocationSize(value: AttachedMaterialQuadlets) = (
            FfiConverterSequenceTypeCesrGroup.allocationSize(value.`value`)
    )

    override fun write(value: AttachedMaterialQuadlets, buf: ByteBuffer) {
            FfiConverterSequenceTypeCesrGroup.write(value.`value`, buf)
    }
}




data class CesrGroup (
    var `attachedMaterialQuadlets`: AttachedMaterialQuadlets?, 
    var `controllerIdxSigs`: ControllerIdxSigs?, 
    var `firstSeenReplayCouples`: FirstSeenReplayCouples?, 
    var `nonTransReceiptCouples`: NonTransReceiptCouples?, 
    var `pathedMaterialQuadlets`: PathedMaterialQuadlets?, 
    var `sadPathSigs`: SadPathSigs?, 
    var `sadPathSigGroups`: SadPathSigGroups?, 
    var `sealSourceCouples`: SealSourceCouples?, 
    var `transIdxSigGroups`: TransIdxSigGroups?, 
    var `transLastIdxSigGroups`: TransLastIdxSigGroups?, 
    var `transReceiptQuadruples`: TransReceiptQuadruples?, 
    var `witnessIdxSigs`: WitnessIdxSigs?
) {
    
}

public object FfiConverterTypeCesrGroup: FfiConverterRustBuffer<CesrGroup> {
    override fun read(buf: ByteBuffer): CesrGroup {
        return CesrGroup(
            FfiConverterOptionalTypeAttachedMaterialQuadlets.read(buf),
            FfiConverterOptionalTypeControllerIdxSigs.read(buf),
            FfiConverterOptionalTypeFirstSeenReplayCouples.read(buf),
            FfiConverterOptionalTypeNonTransReceiptCouples.read(buf),
            FfiConverterOptionalTypePathedMaterialQuadlets.read(buf),
            FfiConverterOptionalTypeSadPathSigs.read(buf),
            FfiConverterOptionalTypeSadPathSigGroups.read(buf),
            FfiConverterOptionalTypeSealSourceCouples.read(buf),
            FfiConverterOptionalTypeTransIdxSigGroups.read(buf),
            FfiConverterOptionalTypeTransLastIdxSigGroups.read(buf),
            FfiConverterOptionalTypeTransReceiptQuadruples.read(buf),
            FfiConverterOptionalTypeWitnessIdxSigs.read(buf),
        )
    }

    override fun allocationSize(value: CesrGroup) = (
            FfiConverterOptionalTypeAttachedMaterialQuadlets.allocationSize(value.`attachedMaterialQuadlets`) +
            FfiConverterOptionalTypeControllerIdxSigs.allocationSize(value.`controllerIdxSigs`) +
            FfiConverterOptionalTypeFirstSeenReplayCouples.allocationSize(value.`firstSeenReplayCouples`) +
            FfiConverterOptionalTypeNonTransReceiptCouples.allocationSize(value.`nonTransReceiptCouples`) +
            FfiConverterOptionalTypePathedMaterialQuadlets.allocationSize(value.`pathedMaterialQuadlets`) +
            FfiConverterOptionalTypeSadPathSigs.allocationSize(value.`sadPathSigs`) +
            FfiConverterOptionalTypeSadPathSigGroups.allocationSize(value.`sadPathSigGroups`) +
            FfiConverterOptionalTypeSealSourceCouples.allocationSize(value.`sealSourceCouples`) +
            FfiConverterOptionalTypeTransIdxSigGroups.allocationSize(value.`transIdxSigGroups`) +
            FfiConverterOptionalTypeTransLastIdxSigGroups.allocationSize(value.`transLastIdxSigGroups`) +
            FfiConverterOptionalTypeTransReceiptQuadruples.allocationSize(value.`transReceiptQuadruples`) +
            FfiConverterOptionalTypeWitnessIdxSigs.allocationSize(value.`witnessIdxSigs`)
    )

    override fun write(value: CesrGroup, buf: ByteBuffer) {
            FfiConverterOptionalTypeAttachedMaterialQuadlets.write(value.`attachedMaterialQuadlets`, buf)
            FfiConverterOptionalTypeControllerIdxSigs.write(value.`controllerIdxSigs`, buf)
            FfiConverterOptionalTypeFirstSeenReplayCouples.write(value.`firstSeenReplayCouples`, buf)
            FfiConverterOptionalTypeNonTransReceiptCouples.write(value.`nonTransReceiptCouples`, buf)
            FfiConverterOptionalTypePathedMaterialQuadlets.write(value.`pathedMaterialQuadlets`, buf)
            FfiConverterOptionalTypeSadPathSigs.write(value.`sadPathSigs`, buf)
            FfiConverterOptionalTypeSadPathSigGroups.write(value.`sadPathSigGroups`, buf)
            FfiConverterOptionalTypeSealSourceCouples.write(value.`sealSourceCouples`, buf)
            FfiConverterOptionalTypeTransIdxSigGroups.write(value.`transIdxSigGroups`, buf)
            FfiConverterOptionalTypeTransLastIdxSigGroups.write(value.`transLastIdxSigGroups`, buf)
            FfiConverterOptionalTypeTransReceiptQuadruples.write(value.`transReceiptQuadruples`, buf)
            FfiConverterOptionalTypeWitnessIdxSigs.write(value.`witnessIdxSigs`, buf)
    }
}




data class Cigar (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt, 
    var `verfer`: Verfer
) {
    
}

public object FfiConverterTypeCigar: FfiConverterRustBuffer<Cigar> {
    override fun read(buf: ByteBuffer): Cigar {
        return Cigar(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTypeVerfer.read(buf),
        )
    }

    override fun allocationSize(value: Cigar) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`) +
            FfiConverterTypeVerfer.allocationSize(value.`verfer`)
    )

    override fun write(value: Cigar, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
            FfiConverterTypeVerfer.write(value.`verfer`, buf)
    }
}




data class ControllerIdxSig (
    var `siger`: Siger
) {
    
}

public object FfiConverterTypeControllerIdxSig: FfiConverterRustBuffer<ControllerIdxSig> {
    override fun read(buf: ByteBuffer): ControllerIdxSig {
        return ControllerIdxSig(
            FfiConverterTypeSiger.read(buf),
        )
    }

    override fun allocationSize(value: ControllerIdxSig) = (
            FfiConverterTypeSiger.allocationSize(value.`siger`)
    )

    override fun write(value: ControllerIdxSig, buf: ByteBuffer) {
            FfiConverterTypeSiger.write(value.`siger`, buf)
    }
}




data class ControllerIdxSigs (
    var `value`: List<ControllerIdxSig>
) {
    
}

public object FfiConverterTypeControllerIdxSigs: FfiConverterRustBuffer<ControllerIdxSigs> {
    override fun read(buf: ByteBuffer): ControllerIdxSigs {
        return ControllerIdxSigs(
            FfiConverterSequenceTypeControllerIdxSig.read(buf),
        )
    }

    override fun allocationSize(value: ControllerIdxSigs) = (
            FfiConverterSequenceTypeControllerIdxSig.allocationSize(value.`value`)
    )

    override fun write(value: ControllerIdxSigs, buf: ByteBuffer) {
            FfiConverterSequenceTypeControllerIdxSig.write(value.`value`, buf)
    }
}




data class CustomPayload (
    var `value`: JsonValue
) {
    
}

public object FfiConverterTypeCustomPayload: FfiConverterRustBuffer<CustomPayload> {
    override fun read(buf: ByteBuffer): CustomPayload {
        return CustomPayload(
            FfiConverterTypeJsonValue.read(buf),
        )
    }

    override fun allocationSize(value: CustomPayload) = (
            FfiConverterTypeJsonValue.allocationSize(value.`value`)
    )

    override fun write(value: CustomPayload, buf: ByteBuffer) {
            FfiConverterTypeJsonValue.write(value.`value`, buf)
    }
}




data class Dater (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt
) {
    
}

public object FfiConverterTypeDater: FfiConverterRustBuffer<Dater> {
    override fun read(buf: ByteBuffer): Dater {
        return Dater(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Dater) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: Dater, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}




data class Diger (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt
) {
    
}

public object FfiConverterTypeDiger: FfiConverterRustBuffer<Diger> {
    override fun read(buf: ByteBuffer): Diger {
        return Diger(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Diger) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: Diger, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}




data class FirstSeenReplayCouple (
    var `firner`: Seqner, 
    var `dater`: Dater
) {
    
}

public object FfiConverterTypeFirstSeenReplayCouple: FfiConverterRustBuffer<FirstSeenReplayCouple> {
    override fun read(buf: ByteBuffer): FirstSeenReplayCouple {
        return FirstSeenReplayCouple(
            FfiConverterTypeSeqner.read(buf),
            FfiConverterTypeDater.read(buf),
        )
    }

    override fun allocationSize(value: FirstSeenReplayCouple) = (
            FfiConverterTypeSeqner.allocationSize(value.`firner`) +
            FfiConverterTypeDater.allocationSize(value.`dater`)
    )

    override fun write(value: FirstSeenReplayCouple, buf: ByteBuffer) {
            FfiConverterTypeSeqner.write(value.`firner`, buf)
            FfiConverterTypeDater.write(value.`dater`, buf)
    }
}




data class FirstSeenReplayCouples (
    var `value`: List<FirstSeenReplayCouple>
) {
    
}

public object FfiConverterTypeFirstSeenReplayCouples: FfiConverterRustBuffer<FirstSeenReplayCouples> {
    override fun read(buf: ByteBuffer): FirstSeenReplayCouples {
        return FirstSeenReplayCouples(
            FfiConverterSequenceTypeFirstSeenReplayCouple.read(buf),
        )
    }

    override fun allocationSize(value: FirstSeenReplayCouples) = (
            FfiConverterSequenceTypeFirstSeenReplayCouple.allocationSize(value.`value`)
    )

    override fun write(value: FirstSeenReplayCouples, buf: ByteBuffer) {
            FfiConverterSequenceTypeFirstSeenReplayCouple.write(value.`value`, buf)
    }
}




data class Message (
    var `payload`: CustomPayload?, 
    var `group`: CesrGroup?
) {
    
}

public object FfiConverterTypeMessage: FfiConverterRustBuffer<Message> {
    override fun read(buf: ByteBuffer): Message {
        return Message(
            FfiConverterOptionalTypeCustomPayload.read(buf),
            FfiConverterOptionalTypeCesrGroup.read(buf),
        )
    }

    override fun allocationSize(value: Message) = (
            FfiConverterOptionalTypeCustomPayload.allocationSize(value.`payload`) +
            FfiConverterOptionalTypeCesrGroup.allocationSize(value.`group`)
    )

    override fun write(value: Message, buf: ByteBuffer) {
            FfiConverterOptionalTypeCustomPayload.write(value.`payload`, buf)
            FfiConverterOptionalTypeCesrGroup.write(value.`group`, buf)
    }
}




data class MessageFromStreamResult (
    var `rest`: List<UByte>, 
    var `message`: Message
) {
    
}

public object FfiConverterTypeMessageFromStreamResult: FfiConverterRustBuffer<MessageFromStreamResult> {
    override fun read(buf: ByteBuffer): MessageFromStreamResult {
        return MessageFromStreamResult(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterTypeMessage.read(buf),
        )
    }

    override fun allocationSize(value: MessageFromStreamResult) = (
            FfiConverterSequenceUByte.allocationSize(value.`rest`) +
            FfiConverterTypeMessage.allocationSize(value.`message`)
    )

    override fun write(value: MessageFromStreamResult, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`rest`, buf)
            FfiConverterTypeMessage.write(value.`message`, buf)
    }
}




data class MessageList (
    var `messages`: List<Message>
) {
    
}

public object FfiConverterTypeMessageList: FfiConverterRustBuffer<MessageList> {
    override fun read(buf: ByteBuffer): MessageList {
        return MessageList(
            FfiConverterSequenceTypeMessage.read(buf),
        )
    }

    override fun allocationSize(value: MessageList) = (
            FfiConverterSequenceTypeMessage.allocationSize(value.`messages`)
    )

    override fun write(value: MessageList, buf: ByteBuffer) {
            FfiConverterSequenceTypeMessage.write(value.`messages`, buf)
    }
}




data class MessageListFromStreamResult (
    var `rest`: List<UByte>, 
    var `messages`: List<Message>
) {
    
}

public object FfiConverterTypeMessageListFromStreamResult: FfiConverterRustBuffer<MessageListFromStreamResult> {
    override fun read(buf: ByteBuffer): MessageListFromStreamResult {
        return MessageListFromStreamResult(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceTypeMessage.read(buf),
        )
    }

    override fun allocationSize(value: MessageListFromStreamResult) = (
            FfiConverterSequenceUByte.allocationSize(value.`rest`) +
            FfiConverterSequenceTypeMessage.allocationSize(value.`messages`)
    )

    override fun write(value: MessageListFromStreamResult, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`rest`, buf)
            FfiConverterSequenceTypeMessage.write(value.`messages`, buf)
    }
}




data class NonTransReceiptCouple (
    var `cigar`: Cigar
) {
    
}

public object FfiConverterTypeNonTransReceiptCouple: FfiConverterRustBuffer<NonTransReceiptCouple> {
    override fun read(buf: ByteBuffer): NonTransReceiptCouple {
        return NonTransReceiptCouple(
            FfiConverterTypeCigar.read(buf),
        )
    }

    override fun allocationSize(value: NonTransReceiptCouple) = (
            FfiConverterTypeCigar.allocationSize(value.`cigar`)
    )

    override fun write(value: NonTransReceiptCouple, buf: ByteBuffer) {
            FfiConverterTypeCigar.write(value.`cigar`, buf)
    }
}




data class NonTransReceiptCouples (
    var `value`: List<NonTransReceiptCouple>
) {
    
}

public object FfiConverterTypeNonTransReceiptCouples: FfiConverterRustBuffer<NonTransReceiptCouples> {
    override fun read(buf: ByteBuffer): NonTransReceiptCouples {
        return NonTransReceiptCouples(
            FfiConverterSequenceTypeNonTransReceiptCouple.read(buf),
        )
    }

    override fun allocationSize(value: NonTransReceiptCouples) = (
            FfiConverterSequenceTypeNonTransReceiptCouple.allocationSize(value.`value`)
    )

    override fun write(value: NonTransReceiptCouples, buf: ByteBuffer) {
            FfiConverterSequenceTypeNonTransReceiptCouple.write(value.`value`, buf)
    }
}




data class PathedMaterialQuadlet (
    var `siger`: Siger
) {
    
}

public object FfiConverterTypePathedMaterialQuadlet: FfiConverterRustBuffer<PathedMaterialQuadlet> {
    override fun read(buf: ByteBuffer): PathedMaterialQuadlet {
        return PathedMaterialQuadlet(
            FfiConverterTypeSiger.read(buf),
        )
    }

    override fun allocationSize(value: PathedMaterialQuadlet) = (
            FfiConverterTypeSiger.allocationSize(value.`siger`)
    )

    override fun write(value: PathedMaterialQuadlet, buf: ByteBuffer) {
            FfiConverterTypeSiger.write(value.`siger`, buf)
    }
}




data class PathedMaterialQuadlets (
    var `value`: List<PathedMaterialQuadlet>
) {
    
}

public object FfiConverterTypePathedMaterialQuadlets: FfiConverterRustBuffer<PathedMaterialQuadlets> {
    override fun read(buf: ByteBuffer): PathedMaterialQuadlets {
        return PathedMaterialQuadlets(
            FfiConverterSequenceTypePathedMaterialQuadlet.read(buf),
        )
    }

    override fun allocationSize(value: PathedMaterialQuadlets) = (
            FfiConverterSequenceTypePathedMaterialQuadlet.allocationSize(value.`value`)
    )

    override fun write(value: PathedMaterialQuadlets, buf: ByteBuffer) {
            FfiConverterSequenceTypePathedMaterialQuadlet.write(value.`value`, buf)
    }
}




data class Prefixer (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt
) {
    
}

public object FfiConverterTypePrefixer: FfiConverterRustBuffer<Prefixer> {
    override fun read(buf: ByteBuffer): Prefixer {
        return Prefixer(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Prefixer) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: Prefixer, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}




data class SadPathSig (
    var `siger`: Siger
) {
    
}

public object FfiConverterTypeSadPathSig: FfiConverterRustBuffer<SadPathSig> {
    override fun read(buf: ByteBuffer): SadPathSig {
        return SadPathSig(
            FfiConverterTypeSiger.read(buf),
        )
    }

    override fun allocationSize(value: SadPathSig) = (
            FfiConverterTypeSiger.allocationSize(value.`siger`)
    )

    override fun write(value: SadPathSig, buf: ByteBuffer) {
            FfiConverterTypeSiger.write(value.`siger`, buf)
    }
}




data class SadPathSigGroup (
    var `siger`: Siger
) {
    
}

public object FfiConverterTypeSadPathSigGroup: FfiConverterRustBuffer<SadPathSigGroup> {
    override fun read(buf: ByteBuffer): SadPathSigGroup {
        return SadPathSigGroup(
            FfiConverterTypeSiger.read(buf),
        )
    }

    override fun allocationSize(value: SadPathSigGroup) = (
            FfiConverterTypeSiger.allocationSize(value.`siger`)
    )

    override fun write(value: SadPathSigGroup, buf: ByteBuffer) {
            FfiConverterTypeSiger.write(value.`siger`, buf)
    }
}




data class SadPathSigGroups (
    var `value`: List<SadPathSigGroup>
) {
    
}

public object FfiConverterTypeSadPathSigGroups: FfiConverterRustBuffer<SadPathSigGroups> {
    override fun read(buf: ByteBuffer): SadPathSigGroups {
        return SadPathSigGroups(
            FfiConverterSequenceTypeSadPathSigGroup.read(buf),
        )
    }

    override fun allocationSize(value: SadPathSigGroups) = (
            FfiConverterSequenceTypeSadPathSigGroup.allocationSize(value.`value`)
    )

    override fun write(value: SadPathSigGroups, buf: ByteBuffer) {
            FfiConverterSequenceTypeSadPathSigGroup.write(value.`value`, buf)
    }
}




data class SadPathSigs (
    var `value`: List<SadPathSig>
) {
    
}

public object FfiConverterTypeSadPathSigs: FfiConverterRustBuffer<SadPathSigs> {
    override fun read(buf: ByteBuffer): SadPathSigs {
        return SadPathSigs(
            FfiConverterSequenceTypeSadPathSig.read(buf),
        )
    }

    override fun allocationSize(value: SadPathSigs) = (
            FfiConverterSequenceTypeSadPathSig.allocationSize(value.`value`)
    )

    override fun write(value: SadPathSigs, buf: ByteBuffer) {
            FfiConverterSequenceTypeSadPathSig.write(value.`value`, buf)
    }
}




data class Saider (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt
) {
    
}

public object FfiConverterTypeSaider: FfiConverterRustBuffer<Saider> {
    override fun read(buf: ByteBuffer): Saider {
        return Saider(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Saider) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: Saider, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}




data class SealSourceCouple (
    var `seqner`: Seqner, 
    var `saider`: Saider
) {
    
}

public object FfiConverterTypeSealSourceCouple: FfiConverterRustBuffer<SealSourceCouple> {
    override fun read(buf: ByteBuffer): SealSourceCouple {
        return SealSourceCouple(
            FfiConverterTypeSeqner.read(buf),
            FfiConverterTypeSaider.read(buf),
        )
    }

    override fun allocationSize(value: SealSourceCouple) = (
            FfiConverterTypeSeqner.allocationSize(value.`seqner`) +
            FfiConverterTypeSaider.allocationSize(value.`saider`)
    )

    override fun write(value: SealSourceCouple, buf: ByteBuffer) {
            FfiConverterTypeSeqner.write(value.`seqner`, buf)
            FfiConverterTypeSaider.write(value.`saider`, buf)
    }
}




data class SealSourceCouples (
    var `value`: List<SealSourceCouple>
) {
    
}

public object FfiConverterTypeSealSourceCouples: FfiConverterRustBuffer<SealSourceCouples> {
    override fun read(buf: ByteBuffer): SealSourceCouples {
        return SealSourceCouples(
            FfiConverterSequenceTypeSealSourceCouple.read(buf),
        )
    }

    override fun allocationSize(value: SealSourceCouples) = (
            FfiConverterSequenceTypeSealSourceCouple.allocationSize(value.`value`)
    )

    override fun write(value: SealSourceCouples, buf: ByteBuffer) {
            FfiConverterSequenceTypeSealSourceCouple.write(value.`value`, buf)
    }
}




data class Seqner (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt
) {
    
}

public object FfiConverterTypeSeqner: FfiConverterRustBuffer<Seqner> {
    override fun read(buf: ByteBuffer): Seqner {
        return Seqner(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Seqner) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: Seqner, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}




data class Siger (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `index`: UInt, 
    var `ondex`: UInt, 
    var `verfer`: Verfer
) {
    
}

public object FfiConverterTypeSiger: FfiConverterRustBuffer<Siger> {
    override fun read(buf: ByteBuffer): Siger {
        return Siger(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTypeVerfer.read(buf),
        )
    }

    override fun allocationSize(value: Siger) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`index`) +
            FfiConverterUInt.allocationSize(value.`ondex`) +
            FfiConverterTypeVerfer.allocationSize(value.`verfer`)
    )

    override fun write(value: Siger, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`index`, buf)
            FfiConverterUInt.write(value.`ondex`, buf)
            FfiConverterTypeVerfer.write(value.`verfer`, buf)
    }
}




data class Signer (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt, 
    var `verfer`: Verfer
) {
    
}

public object FfiConverterTypeSigner: FfiConverterRustBuffer<Signer> {
    override fun read(buf: ByteBuffer): Signer {
        return Signer(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTypeVerfer.read(buf),
        )
    }

    override fun allocationSize(value: Signer) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`) +
            FfiConverterTypeVerfer.allocationSize(value.`verfer`)
    )

    override fun write(value: Signer, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
            FfiConverterTypeVerfer.write(value.`verfer`, buf)
    }
}




data class TransIdxSigGroup (
    var `prefixer`: Prefixer, 
    var `seqner`: Seqner, 
    var `saider`: Saider, 
    var `isigers`: ControllerIdxSigs
) {
    
}

public object FfiConverterTypeTransIdxSigGroup: FfiConverterRustBuffer<TransIdxSigGroup> {
    override fun read(buf: ByteBuffer): TransIdxSigGroup {
        return TransIdxSigGroup(
            FfiConverterTypePrefixer.read(buf),
            FfiConverterTypeSeqner.read(buf),
            FfiConverterTypeSaider.read(buf),
            FfiConverterTypeControllerIdxSigs.read(buf),
        )
    }

    override fun allocationSize(value: TransIdxSigGroup) = (
            FfiConverterTypePrefixer.allocationSize(value.`prefixer`) +
            FfiConverterTypeSeqner.allocationSize(value.`seqner`) +
            FfiConverterTypeSaider.allocationSize(value.`saider`) +
            FfiConverterTypeControllerIdxSigs.allocationSize(value.`isigers`)
    )

    override fun write(value: TransIdxSigGroup, buf: ByteBuffer) {
            FfiConverterTypePrefixer.write(value.`prefixer`, buf)
            FfiConverterTypeSeqner.write(value.`seqner`, buf)
            FfiConverterTypeSaider.write(value.`saider`, buf)
            FfiConverterTypeControllerIdxSigs.write(value.`isigers`, buf)
    }
}




data class TransIdxSigGroups (
    var `value`: List<TransIdxSigGroup>
) {
    
}

public object FfiConverterTypeTransIdxSigGroups: FfiConverterRustBuffer<TransIdxSigGroups> {
    override fun read(buf: ByteBuffer): TransIdxSigGroups {
        return TransIdxSigGroups(
            FfiConverterSequenceTypeTransIdxSigGroup.read(buf),
        )
    }

    override fun allocationSize(value: TransIdxSigGroups) = (
            FfiConverterSequenceTypeTransIdxSigGroup.allocationSize(value.`value`)
    )

    override fun write(value: TransIdxSigGroups, buf: ByteBuffer) {
            FfiConverterSequenceTypeTransIdxSigGroup.write(value.`value`, buf)
    }
}




data class TransLastIdxSigGroup (
    var `prefixer`: Prefixer, 
    var `isigers`: ControllerIdxSigs
) {
    
}

public object FfiConverterTypeTransLastIdxSigGroup: FfiConverterRustBuffer<TransLastIdxSigGroup> {
    override fun read(buf: ByteBuffer): TransLastIdxSigGroup {
        return TransLastIdxSigGroup(
            FfiConverterTypePrefixer.read(buf),
            FfiConverterTypeControllerIdxSigs.read(buf),
        )
    }

    override fun allocationSize(value: TransLastIdxSigGroup) = (
            FfiConverterTypePrefixer.allocationSize(value.`prefixer`) +
            FfiConverterTypeControllerIdxSigs.allocationSize(value.`isigers`)
    )

    override fun write(value: TransLastIdxSigGroup, buf: ByteBuffer) {
            FfiConverterTypePrefixer.write(value.`prefixer`, buf)
            FfiConverterTypeControllerIdxSigs.write(value.`isigers`, buf)
    }
}




data class TransLastIdxSigGroups (
    var `value`: List<TransLastIdxSigGroup>
) {
    
}

public object FfiConverterTypeTransLastIdxSigGroups: FfiConverterRustBuffer<TransLastIdxSigGroups> {
    override fun read(buf: ByteBuffer): TransLastIdxSigGroups {
        return TransLastIdxSigGroups(
            FfiConverterSequenceTypeTransLastIdxSigGroup.read(buf),
        )
    }

    override fun allocationSize(value: TransLastIdxSigGroups) = (
            FfiConverterSequenceTypeTransLastIdxSigGroup.allocationSize(value.`value`)
    )

    override fun write(value: TransLastIdxSigGroups, buf: ByteBuffer) {
            FfiConverterSequenceTypeTransLastIdxSigGroup.write(value.`value`, buf)
    }
}




data class TransReceiptQuadruple (
    var `prefixer`: Prefixer, 
    var `seqner`: Seqner, 
    var `saider`: Saider, 
    var `siger`: Siger
) {
    
}

public object FfiConverterTypeTransReceiptQuadruple: FfiConverterRustBuffer<TransReceiptQuadruple> {
    override fun read(buf: ByteBuffer): TransReceiptQuadruple {
        return TransReceiptQuadruple(
            FfiConverterTypePrefixer.read(buf),
            FfiConverterTypeSeqner.read(buf),
            FfiConverterTypeSaider.read(buf),
            FfiConverterTypeSiger.read(buf),
        )
    }

    override fun allocationSize(value: TransReceiptQuadruple) = (
            FfiConverterTypePrefixer.allocationSize(value.`prefixer`) +
            FfiConverterTypeSeqner.allocationSize(value.`seqner`) +
            FfiConverterTypeSaider.allocationSize(value.`saider`) +
            FfiConverterTypeSiger.allocationSize(value.`siger`)
    )

    override fun write(value: TransReceiptQuadruple, buf: ByteBuffer) {
            FfiConverterTypePrefixer.write(value.`prefixer`, buf)
            FfiConverterTypeSeqner.write(value.`seqner`, buf)
            FfiConverterTypeSaider.write(value.`saider`, buf)
            FfiConverterTypeSiger.write(value.`siger`, buf)
    }
}




data class TransReceiptQuadruples (
    var `value`: List<TransReceiptQuadruple>
) {
    
}

public object FfiConverterTypeTransReceiptQuadruples: FfiConverterRustBuffer<TransReceiptQuadruples> {
    override fun read(buf: ByteBuffer): TransReceiptQuadruples {
        return TransReceiptQuadruples(
            FfiConverterSequenceTypeTransReceiptQuadruple.read(buf),
        )
    }

    override fun allocationSize(value: TransReceiptQuadruples) = (
            FfiConverterSequenceTypeTransReceiptQuadruple.allocationSize(value.`value`)
    )

    override fun write(value: TransReceiptQuadruples, buf: ByteBuffer) {
            FfiConverterSequenceTypeTransReceiptQuadruple.write(value.`value`, buf)
    }
}




data class Verfer (
    var `raw`: List<UByte>, 
    var `code`: String, 
    var `size`: UInt
) {
    
}

public object FfiConverterTypeVerfer: FfiConverterRustBuffer<Verfer> {
    override fun read(buf: ByteBuffer): Verfer {
        return Verfer(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: Verfer) = (
            FfiConverterSequenceUByte.allocationSize(value.`raw`) +
            FfiConverterString.allocationSize(value.`code`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: Verfer, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`raw`, buf)
            FfiConverterString.write(value.`code`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}




data class WitnessIdxSig (
    var `siger`: Siger
) {
    
}

public object FfiConverterTypeWitnessIdxSig: FfiConverterRustBuffer<WitnessIdxSig> {
    override fun read(buf: ByteBuffer): WitnessIdxSig {
        return WitnessIdxSig(
            FfiConverterTypeSiger.read(buf),
        )
    }

    override fun allocationSize(value: WitnessIdxSig) = (
            FfiConverterTypeSiger.allocationSize(value.`siger`)
    )

    override fun write(value: WitnessIdxSig, buf: ByteBuffer) {
            FfiConverterTypeSiger.write(value.`siger`, buf)
    }
}




data class WitnessIdxSigs (
    var `value`: List<WitnessIdxSig>
) {
    
}

public object FfiConverterTypeWitnessIdxSigs: FfiConverterRustBuffer<WitnessIdxSigs> {
    override fun read(buf: ByteBuffer): WitnessIdxSigs {
        return WitnessIdxSigs(
            FfiConverterSequenceTypeWitnessIdxSig.read(buf),
        )
    }

    override fun allocationSize(value: WitnessIdxSigs) = (
            FfiConverterSequenceTypeWitnessIdxSig.allocationSize(value.`value`)
    )

    override fun write(value: WitnessIdxSigs, buf: ByteBuffer) {
            FfiConverterSequenceTypeWitnessIdxSig.write(value.`value`, buf)
    }
}




enum class IndexerCodex {
    ED25519,ED25519_CRT,ECDSA_256K1,ECDSA_256K1_CRT,ED448,ED448_CRT,ED25519_BIG,ED25519_BIG_CRT,ECDSA_256K1_BIG,ECDSA_256K1_BIG_CRT,ED448_BIG,ED448_BIG_CRT,TBD0,TBD1,TBD4;
}

public object FfiConverterTypeIndexerCodex: FfiConverterRustBuffer<IndexerCodex> {
    override fun read(buf: ByteBuffer) = try {
        IndexerCodex.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: IndexerCodex) = 4

    override fun write(value: IndexerCodex, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class MatterCodex {
    ED25519_SEED,ED25519_N,X25519,ED25519,BLAKE3_256,BLAKE2B_256,BLAKE2S_256,SHA3_256,SHA2_256,ECDSA_256K1_SEED,ED448_SEED,X448,SHORT,BIG,X25519_PRIVATE,X25519_CIPHER_SEED,SALT_128,ED25519_SIG,ECDSA_256K1_SIG,BLAKE3_512,BLAKE2B_512,SHA3_512,SHA2_512,LONG,ECDSA_256K1_N,ECDSA_256K1,ED448_N,ED448,ED448_SIG,TERN,DATE_TIME,X25519_CIPHER_SALT,TBD1,TBD2,STR_B64_L0,STR_B64_L1,STR_B64_L2,STR_B64_BIG_L0,STR_B64_BIG_L1,STR_B64_BIG_L2,BYTES_L0,BYTES_L1,BYTES_L2,BYTES_BIG_L0,BYTES_BIG_L1,BYTES_BIG_L2;
}

public object FfiConverterTypeMatterCodex: FfiConverterRustBuffer<MatterCodex> {
    override fun read(buf: ByteBuffer) = try {
        MatterCodex.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: MatterCodex) = 4

    override fun write(value: MatterCodex, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class ParsideException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class PayloadDeserializeException(message: String) : ParsideException(message)
        class StreamDeserializationException(message: String) : ParsideException(message)
        class EmptyBytesStream(message: String) : ParsideException(message)
        class NotExist(message: String) : ParsideException(message)
        class Unexpected(message: String) : ParsideException(message)
        class Common(message: String) : ParsideException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<ParsideException> {
        override fun lift(error_buf: RustBuffer.ByValue): ParsideException = FfiConverterTypeParsideError.lift(error_buf)
    }
}

public object FfiConverterTypeParsideError : FfiConverterRustBuffer<ParsideException> {
    override fun read(buf: ByteBuffer): ParsideException {
        
            return when(buf.getInt()) {
            1 -> ParsideException.PayloadDeserializeException(FfiConverterString.read(buf))
            2 -> ParsideException.StreamDeserializationException(FfiConverterString.read(buf))
            3 -> ParsideException.EmptyBytesStream(FfiConverterString.read(buf))
            4 -> ParsideException.NotExist(FfiConverterString.read(buf))
            5 -> ParsideException.Unexpected(FfiConverterString.read(buf))
            6 -> ParsideException.Common(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: ParsideException): Int {
        return 4
    }

    override fun write(value: ParsideException, buf: ByteBuffer) {
        when(value) {
            is ParsideException.PayloadDeserializeException -> {
                buf.putInt(1)
                Unit
            }
            is ParsideException.StreamDeserializationException -> {
                buf.putInt(2)
                Unit
            }
            is ParsideException.EmptyBytesStream -> {
                buf.putInt(3)
                Unit
            }
            is ParsideException.NotExist -> {
                buf.putInt(4)
                Unit
            }
            is ParsideException.Unexpected -> {
                buf.putInt(5)
                Unit
            }
            is ParsideException.Common -> {
                buf.putInt(6)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




public object FfiConverterOptionalUInt: FfiConverterRustBuffer<UInt?> {
    override fun read(buf: ByteBuffer): UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: UInt?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAttachedMaterialQuadlets: FfiConverterRustBuffer<AttachedMaterialQuadlets?> {
    override fun read(buf: ByteBuffer): AttachedMaterialQuadlets? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAttachedMaterialQuadlets.read(buf)
    }

    override fun allocationSize(value: AttachedMaterialQuadlets?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeAttachedMaterialQuadlets.allocationSize(value)
        }
    }

    override fun write(value: AttachedMaterialQuadlets?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAttachedMaterialQuadlets.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCesrGroup: FfiConverterRustBuffer<CesrGroup?> {
    override fun read(buf: ByteBuffer): CesrGroup? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCesrGroup.read(buf)
    }

    override fun allocationSize(value: CesrGroup?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCesrGroup.allocationSize(value)
        }
    }

    override fun write(value: CesrGroup?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCesrGroup.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeControllerIdxSigs: FfiConverterRustBuffer<ControllerIdxSigs?> {
    override fun read(buf: ByteBuffer): ControllerIdxSigs? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeControllerIdxSigs.read(buf)
    }

    override fun allocationSize(value: ControllerIdxSigs?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeControllerIdxSigs.allocationSize(value)
        }
    }

    override fun write(value: ControllerIdxSigs?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeControllerIdxSigs.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCustomPayload: FfiConverterRustBuffer<CustomPayload?> {
    override fun read(buf: ByteBuffer): CustomPayload? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCustomPayload.read(buf)
    }

    override fun allocationSize(value: CustomPayload?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCustomPayload.allocationSize(value)
        }
    }

    override fun write(value: CustomPayload?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCustomPayload.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFirstSeenReplayCouples: FfiConverterRustBuffer<FirstSeenReplayCouples?> {
    override fun read(buf: ByteBuffer): FirstSeenReplayCouples? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFirstSeenReplayCouples.read(buf)
    }

    override fun allocationSize(value: FirstSeenReplayCouples?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFirstSeenReplayCouples.allocationSize(value)
        }
    }

    override fun write(value: FirstSeenReplayCouples?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFirstSeenReplayCouples.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeNonTransReceiptCouples: FfiConverterRustBuffer<NonTransReceiptCouples?> {
    override fun read(buf: ByteBuffer): NonTransReceiptCouples? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeNonTransReceiptCouples.read(buf)
    }

    override fun allocationSize(value: NonTransReceiptCouples?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeNonTransReceiptCouples.allocationSize(value)
        }
    }

    override fun write(value: NonTransReceiptCouples?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeNonTransReceiptCouples.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePathedMaterialQuadlets: FfiConverterRustBuffer<PathedMaterialQuadlets?> {
    override fun read(buf: ByteBuffer): PathedMaterialQuadlets? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePathedMaterialQuadlets.read(buf)
    }

    override fun allocationSize(value: PathedMaterialQuadlets?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePathedMaterialQuadlets.allocationSize(value)
        }
    }

    override fun write(value: PathedMaterialQuadlets?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePathedMaterialQuadlets.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSadPathSigGroups: FfiConverterRustBuffer<SadPathSigGroups?> {
    override fun read(buf: ByteBuffer): SadPathSigGroups? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSadPathSigGroups.read(buf)
    }

    override fun allocationSize(value: SadPathSigGroups?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSadPathSigGroups.allocationSize(value)
        }
    }

    override fun write(value: SadPathSigGroups?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSadPathSigGroups.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSadPathSigs: FfiConverterRustBuffer<SadPathSigs?> {
    override fun read(buf: ByteBuffer): SadPathSigs? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSadPathSigs.read(buf)
    }

    override fun allocationSize(value: SadPathSigs?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSadPathSigs.allocationSize(value)
        }
    }

    override fun write(value: SadPathSigs?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSadPathSigs.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSealSourceCouples: FfiConverterRustBuffer<SealSourceCouples?> {
    override fun read(buf: ByteBuffer): SealSourceCouples? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSealSourceCouples.read(buf)
    }

    override fun allocationSize(value: SealSourceCouples?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSealSourceCouples.allocationSize(value)
        }
    }

    override fun write(value: SealSourceCouples?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSealSourceCouples.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTransIdxSigGroups: FfiConverterRustBuffer<TransIdxSigGroups?> {
    override fun read(buf: ByteBuffer): TransIdxSigGroups? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTransIdxSigGroups.read(buf)
    }

    override fun allocationSize(value: TransIdxSigGroups?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTransIdxSigGroups.allocationSize(value)
        }
    }

    override fun write(value: TransIdxSigGroups?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTransIdxSigGroups.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTransLastIdxSigGroups: FfiConverterRustBuffer<TransLastIdxSigGroups?> {
    override fun read(buf: ByteBuffer): TransLastIdxSigGroups? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTransLastIdxSigGroups.read(buf)
    }

    override fun allocationSize(value: TransLastIdxSigGroups?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTransLastIdxSigGroups.allocationSize(value)
        }
    }

    override fun write(value: TransLastIdxSigGroups?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTransLastIdxSigGroups.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTransReceiptQuadruples: FfiConverterRustBuffer<TransReceiptQuadruples?> {
    override fun read(buf: ByteBuffer): TransReceiptQuadruples? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTransReceiptQuadruples.read(buf)
    }

    override fun allocationSize(value: TransReceiptQuadruples?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTransReceiptQuadruples.allocationSize(value)
        }
    }

    override fun write(value: TransReceiptQuadruples?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTransReceiptQuadruples.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeWitnessIdxSigs: FfiConverterRustBuffer<WitnessIdxSigs?> {
    override fun read(buf: ByteBuffer): WitnessIdxSigs? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeWitnessIdxSigs.read(buf)
    }

    override fun allocationSize(value: WitnessIdxSigs?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeWitnessIdxSigs.allocationSize(value)
        }
    }

    override fun write(value: WitnessIdxSigs?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeWitnessIdxSigs.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeCesrGroup: FfiConverterRustBuffer<List<CesrGroup>> {
    override fun read(buf: ByteBuffer): List<CesrGroup> {
        val len = buf.getInt()
        return List<CesrGroup>(len) {
            FfiConverterTypeCesrGroup.read(buf)
        }
    }

    override fun allocationSize(value: List<CesrGroup>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeCesrGroup.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<CesrGroup>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeCesrGroup.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeControllerIdxSig: FfiConverterRustBuffer<List<ControllerIdxSig>> {
    override fun read(buf: ByteBuffer): List<ControllerIdxSig> {
        val len = buf.getInt()
        return List<ControllerIdxSig>(len) {
            FfiConverterTypeControllerIdxSig.read(buf)
        }
    }

    override fun allocationSize(value: List<ControllerIdxSig>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeControllerIdxSig.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ControllerIdxSig>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeControllerIdxSig.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFirstSeenReplayCouple: FfiConverterRustBuffer<List<FirstSeenReplayCouple>> {
    override fun read(buf: ByteBuffer): List<FirstSeenReplayCouple> {
        val len = buf.getInt()
        return List<FirstSeenReplayCouple>(len) {
            FfiConverterTypeFirstSeenReplayCouple.read(buf)
        }
    }

    override fun allocationSize(value: List<FirstSeenReplayCouple>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFirstSeenReplayCouple.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FirstSeenReplayCouple>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFirstSeenReplayCouple.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeMessage: FfiConverterRustBuffer<List<Message>> {
    override fun read(buf: ByteBuffer): List<Message> {
        val len = buf.getInt()
        return List<Message>(len) {
            FfiConverterTypeMessage.read(buf)
        }
    }

    override fun allocationSize(value: List<Message>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeMessage.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Message>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeMessage.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeNonTransReceiptCouple: FfiConverterRustBuffer<List<NonTransReceiptCouple>> {
    override fun read(buf: ByteBuffer): List<NonTransReceiptCouple> {
        val len = buf.getInt()
        return List<NonTransReceiptCouple>(len) {
            FfiConverterTypeNonTransReceiptCouple.read(buf)
        }
    }

    override fun allocationSize(value: List<NonTransReceiptCouple>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeNonTransReceiptCouple.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<NonTransReceiptCouple>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeNonTransReceiptCouple.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePathedMaterialQuadlet: FfiConverterRustBuffer<List<PathedMaterialQuadlet>> {
    override fun read(buf: ByteBuffer): List<PathedMaterialQuadlet> {
        val len = buf.getInt()
        return List<PathedMaterialQuadlet>(len) {
            FfiConverterTypePathedMaterialQuadlet.read(buf)
        }
    }

    override fun allocationSize(value: List<PathedMaterialQuadlet>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypePathedMaterialQuadlet.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PathedMaterialQuadlet>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypePathedMaterialQuadlet.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeSadPathSig: FfiConverterRustBuffer<List<SadPathSig>> {
    override fun read(buf: ByteBuffer): List<SadPathSig> {
        val len = buf.getInt()
        return List<SadPathSig>(len) {
            FfiConverterTypeSadPathSig.read(buf)
        }
    }

    override fun allocationSize(value: List<SadPathSig>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSadPathSig.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SadPathSig>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSadPathSig.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeSadPathSigGroup: FfiConverterRustBuffer<List<SadPathSigGroup>> {
    override fun read(buf: ByteBuffer): List<SadPathSigGroup> {
        val len = buf.getInt()
        return List<SadPathSigGroup>(len) {
            FfiConverterTypeSadPathSigGroup.read(buf)
        }
    }

    override fun allocationSize(value: List<SadPathSigGroup>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSadPathSigGroup.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SadPathSigGroup>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSadPathSigGroup.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeSealSourceCouple: FfiConverterRustBuffer<List<SealSourceCouple>> {
    override fun read(buf: ByteBuffer): List<SealSourceCouple> {
        val len = buf.getInt()
        return List<SealSourceCouple>(len) {
            FfiConverterTypeSealSourceCouple.read(buf)
        }
    }

    override fun allocationSize(value: List<SealSourceCouple>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSealSourceCouple.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SealSourceCouple>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSealSourceCouple.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTransIdxSigGroup: FfiConverterRustBuffer<List<TransIdxSigGroup>> {
    override fun read(buf: ByteBuffer): List<TransIdxSigGroup> {
        val len = buf.getInt()
        return List<TransIdxSigGroup>(len) {
            FfiConverterTypeTransIdxSigGroup.read(buf)
        }
    }

    override fun allocationSize(value: List<TransIdxSigGroup>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeTransIdxSigGroup.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TransIdxSigGroup>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeTransIdxSigGroup.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTransLastIdxSigGroup: FfiConverterRustBuffer<List<TransLastIdxSigGroup>> {
    override fun read(buf: ByteBuffer): List<TransLastIdxSigGroup> {
        val len = buf.getInt()
        return List<TransLastIdxSigGroup>(len) {
            FfiConverterTypeTransLastIdxSigGroup.read(buf)
        }
    }

    override fun allocationSize(value: List<TransLastIdxSigGroup>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeTransLastIdxSigGroup.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TransLastIdxSigGroup>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeTransLastIdxSigGroup.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTransReceiptQuadruple: FfiConverterRustBuffer<List<TransReceiptQuadruple>> {
    override fun read(buf: ByteBuffer): List<TransReceiptQuadruple> {
        val len = buf.getInt()
        return List<TransReceiptQuadruple>(len) {
            FfiConverterTypeTransReceiptQuadruple.read(buf)
        }
    }

    override fun allocationSize(value: List<TransReceiptQuadruple>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeTransReceiptQuadruple.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TransReceiptQuadruple>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeTransReceiptQuadruple.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeWitnessIdxSig: FfiConverterRustBuffer<List<WitnessIdxSig>> {
    override fun read(buf: ByteBuffer): List<WitnessIdxSig> {
        val len = buf.getInt()
        return List<WitnessIdxSig>(len) {
            FfiConverterTypeWitnessIdxSig.read(buf)
        }
    }

    override fun allocationSize(value: List<WitnessIdxSig>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeWitnessIdxSig.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<WitnessIdxSig>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeWitnessIdxSig.write(it, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias JsonValue = String
public typealias FfiConverterTypeJsonValue = FfiConverterString
@Throws(ParsideException::class)

fun `daterNewWithCodeAndRaw`(`code`: MatterCodex, `raw`: List<UByte>): Dater {
    return FfiConverterTypeDater.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_new_with_code_and_raw(FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), _status)
})
}


@Throws(ParsideException::class)

fun `daterNewWithQb64`(`qb64`: String): Dater {
    return FfiConverterTypeDater.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `daterNewWithQb64b`(`qb64b`: List<UByte>): Dater {
    return FfiConverterTypeDater.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `daterNewWithQb2`(`qb2`: List<UByte>): Dater {
    return FfiConverterTypeDater.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `daterCode`(`dater`: Dater): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_code(FfiConverterTypeDater.lower(`dater`), _status)
})
}



fun `daterSize`(`dater`: Dater): UInt {
    return FfiConverterUInt.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_size(FfiConverterTypeDater.lower(`dater`), _status)
})
}



fun `daterRaw`(`dater`: Dater): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_raw(FfiConverterTypeDater.lower(`dater`), _status)
})
}


@Throws(ParsideException::class)

fun `daterQb64`(`dater`: Dater): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_qb64(FfiConverterTypeDater.lower(`dater`), _status)
})
}


@Throws(ParsideException::class)

fun `daterQb64b`(`dater`: Dater): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_qb64b(FfiConverterTypeDater.lower(`dater`), _status)
})
}


@Throws(ParsideException::class)

fun `daterQb2`(`dater`: Dater): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_dater_qb2(FfiConverterTypeDater.lower(`dater`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerNewWithCodeAndRaw`(`code`: MatterCodex, `raw`: List<UByte>): Seqner {
    return FfiConverterTypeSeqner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_new_with_code_and_raw(FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerNewWithQb64`(`qb64`: String): Seqner {
    return FfiConverterTypeSeqner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerNewWithQb64b`(`qb64b`: List<UByte>): Seqner {
    return FfiConverterTypeSeqner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerNewWithQb2`(`qb2`: List<UByte>): Seqner {
    return FfiConverterTypeSeqner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `seqnerCode`(`seqner`: Seqner): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_code(FfiConverterTypeSeqner.lower(`seqner`), _status)
})
}



fun `seqnerSize`(`seqner`: Seqner): UInt {
    return FfiConverterUInt.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_size(FfiConverterTypeSeqner.lower(`seqner`), _status)
})
}



fun `seqnerRaw`(`seqner`: Seqner): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_raw(FfiConverterTypeSeqner.lower(`seqner`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerQb64`(`seqner`: Seqner): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_qb64(FfiConverterTypeSeqner.lower(`seqner`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerQb64b`(`seqner`: Seqner): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_qb64b(FfiConverterTypeSeqner.lower(`seqner`), _status)
})
}


@Throws(ParsideException::class)

fun `seqnerQb2`(`seqner`: Seqner): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seqner_qb2(FfiConverterTypeSeqner.lower(`seqner`), _status)
})
}


@Throws(ParsideException::class)

fun `digerNewWithCodeAndRaw`(`code`: MatterCodex, `raw`: List<UByte>): Diger {
    return FfiConverterTypeDiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_new_with_code_and_raw(FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), _status)
})
}


@Throws(ParsideException::class)

fun `digerNewWithQb64`(`qb64`: String): Diger {
    return FfiConverterTypeDiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `digerNewWithQb64b`(`qb64b`: List<UByte>): Diger {
    return FfiConverterTypeDiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `digerNewWithQb2`(`qb2`: List<UByte>): Diger {
    return FfiConverterTypeDiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `digerCode`(`diger`: Diger): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_code(FfiConverterTypeDiger.lower(`diger`), _status)
})
}



fun `digerSize`(`diger`: Diger): UInt {
    return FfiConverterUInt.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_size(FfiConverterTypeDiger.lower(`diger`), _status)
})
}



fun `digerRaw`(`diger`: Diger): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_raw(FfiConverterTypeDiger.lower(`diger`), _status)
})
}


@Throws(ParsideException::class)

fun `digerQb64`(`diger`: Diger): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_qb64(FfiConverterTypeDiger.lower(`diger`), _status)
})
}


@Throws(ParsideException::class)

fun `digerQb64b`(`diger`: Diger): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_qb64b(FfiConverterTypeDiger.lower(`diger`), _status)
})
}


@Throws(ParsideException::class)

fun `digerQb2`(`diger`: Diger): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_diger_qb2(FfiConverterTypeDiger.lower(`diger`), _status)
})
}


@Throws(ParsideException::class)

fun `saiderNewWithQb64`(`qb64`: String): Saider {
    return FfiConverterTypeSaider.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `saiderNewWithQb64b`(`qb64b`: List<UByte>): Saider {
    return FfiConverterTypeSaider.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `saiderNewWithQb2`(`qb2`: List<UByte>): Saider {
    return FfiConverterTypeSaider.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `saiderCode`(`saider`: Saider): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_code(FfiConverterTypeSaider.lower(`saider`), _status)
})
}



fun `saiderSize`(`saider`: Saider): UInt {
    return FfiConverterUInt.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_size(FfiConverterTypeSaider.lower(`saider`), _status)
})
}



fun `saiderRaw`(`saider`: Saider): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_raw(FfiConverterTypeSaider.lower(`saider`), _status)
})
}


@Throws(ParsideException::class)

fun `saiderQb64`(`saider`: Saider): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_qb64(FfiConverterTypeSaider.lower(`saider`), _status)
})
}


@Throws(ParsideException::class)

fun `saiderQb64b`(`saider`: Saider): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_qb64b(FfiConverterTypeSaider.lower(`saider`), _status)
})
}


@Throws(ParsideException::class)

fun `saiderQb2`(`saider`: Saider): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_saider_qb2(FfiConverterTypeSaider.lower(`saider`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarNewWithCodeAndRaw`(`verfer`: Verfer, `code`: MatterCodex, `raw`: List<UByte>): Cigar {
    return FfiConverterTypeCigar.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_new_with_code_and_raw(FfiConverterTypeVerfer.lower(`verfer`), FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarNewWithQb64`(`verfer`: Verfer, `qb64`: String): Cigar {
    return FfiConverterTypeCigar.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_new_with_qb64(FfiConverterTypeVerfer.lower(`verfer`), FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarNewWithQb64b`(`verfer`: Verfer, `qb64b`: List<UByte>): Cigar {
    return FfiConverterTypeCigar.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_new_with_qb64b(FfiConverterTypeVerfer.lower(`verfer`), FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarNewWithQb2`(`verfer`: Verfer, `qb2`: List<UByte>): Cigar {
    return FfiConverterTypeCigar.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_new_with_qb2(FfiConverterTypeVerfer.lower(`verfer`), FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `cigarCode`(`cigar`: Cigar): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_code(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}



fun `cigarSize`(`cigar`: Cigar): UInt {
    return FfiConverterUInt.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_size(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}



fun `cigarRaw`(`cigar`: Cigar): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_raw(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarQb64`(`cigar`: Cigar): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_qb64(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarQb64b`(`cigar`: Cigar): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_qb64b(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}


@Throws(ParsideException::class)

fun `cigarQb2`(`cigar`: Cigar): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_cigar_qb2(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}


@Throws(ParsideException::class)

fun `signerNewWithCodeAndRaw`(`code`: MatterCodex, `raw`: List<UByte>, `transferable`: Boolean): Signer {
    return FfiConverterTypeSigner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_new_with_code_and_raw(FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), FfiConverterBoolean.lower(`transferable`), _status)
})
}


@Throws(ParsideException::class)

fun `signerNewWithQb64`(`qb64`: String, `transferable`: Boolean): Signer {
    return FfiConverterTypeSigner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_new_with_qb64(FfiConverterString.lower(`qb64`), FfiConverterBoolean.lower(`transferable`), _status)
})
}


@Throws(ParsideException::class)

fun `signerNewWithQb64b`(`qb64b`: List<UByte>, `transferable`: Boolean): Signer {
    return FfiConverterTypeSigner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), FfiConverterBoolean.lower(`transferable`), _status)
})
}


@Throws(ParsideException::class)

fun `signerNewWithQb2`(`qb2`: List<UByte>, `transferable`: Boolean): Signer {
    return FfiConverterTypeSigner.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), FfiConverterBoolean.lower(`transferable`), _status)
})
}



fun `signerCode`(`signer`: Signer): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_code(FfiConverterTypeSigner.lower(`signer`), _status)
})
}



fun `signerSize`(`signer`: Signer): UInt {
    return FfiConverterUInt.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_size(FfiConverterTypeSigner.lower(`signer`), _status)
})
}



fun `signerRaw`(`signer`: Signer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_raw(FfiConverterTypeSigner.lower(`signer`), _status)
})
}


@Throws(ParsideException::class)

fun `signerQb64`(`signer`: Signer): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_qb64(FfiConverterTypeSigner.lower(`signer`), _status)
})
}


@Throws(ParsideException::class)

fun `signerQb64b`(`signer`: Signer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_qb64b(FfiConverterTypeSigner.lower(`signer`), _status)
})
}


@Throws(ParsideException::class)

fun `signerQb2`(`signer`: Signer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_signer_qb2(FfiConverterTypeSigner.lower(`signer`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerNewWithCodeAndRaw`(`code`: IndexerCodex, `raw`: List<UByte>, `index`: UInt, `ondex`: UInt?): Siger {
    return FfiConverterTypeSiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_new_with_code_and_raw(FfiConverterTypeIndexerCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), FfiConverterUInt.lower(`index`), FfiConverterOptionalUInt.lower(`ondex`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerNewWithQb64`(`qb64`: String): Siger {
    return FfiConverterTypeSiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerNewWithQb64b`(`qb64b`: List<UByte>): Siger {
    return FfiConverterTypeSiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerNewWithQb2`(`qb2`: List<UByte>): Siger {
    return FfiConverterTypeSiger.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `sigerCode`(`siger`: Siger): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_code(FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `sigerRaw`(`siger`: Siger): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_raw(FfiConverterTypeSiger.lower(`siger`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerQb64`(`siger`: Siger): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_qb64(FfiConverterTypeSiger.lower(`siger`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerQb64b`(`siger`: Siger): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_qb64b(FfiConverterTypeSiger.lower(`siger`), _status)
})
}


@Throws(ParsideException::class)

fun `sigerQb2`(`siger`: Siger): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_siger_qb2(FfiConverterTypeSiger.lower(`siger`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerNewWithCodeAndRaw`(`code`: MatterCodex, `raw`: List<UByte>): Prefixer {
    return FfiConverterTypePrefixer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_new_with_code_and_raw(FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerNewWithQb64`(`qb64`: String): Prefixer {
    return FfiConverterTypePrefixer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerNewWithQb64b`(`qb64b`: List<UByte>): Prefixer {
    return FfiConverterTypePrefixer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerNewWithQb2`(`qb2`: List<UByte>): Prefixer {
    return FfiConverterTypePrefixer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `prefixerCode`(`prefixer`: Prefixer): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_code(FfiConverterTypePrefixer.lower(`prefixer`), _status)
})
}



fun `prefixerRaw`(`prefixer`: Prefixer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_raw(FfiConverterTypePrefixer.lower(`prefixer`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerQb64`(`prefixer`: Prefixer): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_qb64(FfiConverterTypePrefixer.lower(`prefixer`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerQb64b`(`prefixer`: Prefixer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_qb64b(FfiConverterTypePrefixer.lower(`prefixer`), _status)
})
}


@Throws(ParsideException::class)

fun `prefixerQb2`(`prefixer`: Prefixer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_prefixer_qb2(FfiConverterTypePrefixer.lower(`prefixer`), _status)
})
}


@Throws(ParsideException::class)

fun `verferNewWithCodeAndRaw`(`code`: MatterCodex, `raw`: List<UByte>): Verfer {
    return FfiConverterTypeVerfer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_new_with_code_and_raw(FfiConverterTypeMatterCodex.lower(`code`), FfiConverterSequenceUByte.lower(`raw`), _status)
})
}


@Throws(ParsideException::class)

fun `verferNewWithQb64`(`qb64`: String): Verfer {
    return FfiConverterTypeVerfer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_new_with_qb64(FfiConverterString.lower(`qb64`), _status)
})
}


@Throws(ParsideException::class)

fun `verferNewWithQb64b`(`qb64b`: List<UByte>): Verfer {
    return FfiConverterTypeVerfer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_new_with_qb64b(FfiConverterSequenceUByte.lower(`qb64b`), _status)
})
}


@Throws(ParsideException::class)

fun `verferNewWithQb2`(`qb2`: List<UByte>): Verfer {
    return FfiConverterTypeVerfer.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_new_with_qb2(FfiConverterSequenceUByte.lower(`qb2`), _status)
})
}



fun `verferCode`(`verfer`: Verfer): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_code(FfiConverterTypeVerfer.lower(`verfer`), _status)
})
}



fun `verferRaw`(`verfer`: Verfer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_raw(FfiConverterTypeVerfer.lower(`verfer`), _status)
})
}


@Throws(ParsideException::class)

fun `verferQb64`(`verfer`: Verfer): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_qb64(FfiConverterTypeVerfer.lower(`verfer`), _status)
})
}


@Throws(ParsideException::class)

fun `verferQb64b`(`verfer`: Verfer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_qb64b(FfiConverterTypeVerfer.lower(`verfer`), _status)
})
}


@Throws(ParsideException::class)

fun `verferQb2`(`verfer`: Verfer): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_verfer_qb2(FfiConverterTypeVerfer.lower(`verfer`), _status)
})
}


@Throws(ParsideException::class)

fun `messageFromStreamBytes`(`bytes`: List<UByte>): MessageFromStreamResult {
    return FfiConverterTypeMessageFromStreamResult.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_message_from_stream_bytes(FfiConverterSequenceUByte.lower(`bytes`), _status)
})
}


@Throws(ParsideException::class)

fun `messageListFromStreamBytes`(`bytes`: List<UByte>): MessageListFromStreamResult {
    return FfiConverterTypeMessageListFromStreamResult.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_message_list_from_stream_bytes(FfiConverterSequenceUByte.lower(`bytes`), _status)
})
}



fun `attachedMaterialQuadletsCreate`(`value`: List<CesrGroup>): AttachedMaterialQuadlets {
    return FfiConverterTypeAttachedMaterialQuadlets.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_attached_material_quadlets_create(FfiConverterSequenceTypeCesrGroup.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `attachedMaterialQuadletsQb64`(`attachedMaterialQuadlets`: AttachedMaterialQuadlets): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_attached_material_quadlets_qb64(FfiConverterTypeAttachedMaterialQuadlets.lower(`attachedMaterialQuadlets`), _status)
})
}


@Throws(ParsideException::class)

fun `attachedMaterialQuadletsQb64b`(`attachedMaterialQuadlets`: AttachedMaterialQuadlets): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_attached_material_quadlets_qb64b(FfiConverterTypeAttachedMaterialQuadlets.lower(`attachedMaterialQuadlets`), _status)
})
}


@Throws(ParsideException::class)

fun `attachedMaterialQuadletsQb2`(`attachedMaterialQuadlets`: AttachedMaterialQuadlets): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_attached_material_quadlets_qb2(FfiConverterTypeAttachedMaterialQuadlets.lower(`attachedMaterialQuadlets`), _status)
})
}



fun `controllerIdxSigCreate`(`siger`: Siger): ControllerIdxSig {
    return FfiConverterTypeControllerIdxSig.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_controller_idx_sig_create(FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `controllerIdxSigsCreate`(`value`: List<ControllerIdxSig>): ControllerIdxSigs {
    return FfiConverterTypeControllerIdxSigs.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_controller_idx_sigs_create(FfiConverterSequenceTypeControllerIdxSig.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `controllerIdxSigsQb64`(`controllerIdxSigs`: ControllerIdxSigs): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_controller_idx_sigs_qb64(FfiConverterTypeControllerIdxSigs.lower(`controllerIdxSigs`), _status)
})
}


@Throws(ParsideException::class)

fun `controllerIdxSigsQb64b`(`controllerIdxSigs`: ControllerIdxSigs): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_controller_idx_sigs_qb64b(FfiConverterTypeControllerIdxSigs.lower(`controllerIdxSigs`), _status)
})
}


@Throws(ParsideException::class)

fun `controllerIdxSigsQb2`(`controllerIdxSigs`: ControllerIdxSigs): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_controller_idx_sigs_qb2(FfiConverterTypeControllerIdxSigs.lower(`controllerIdxSigs`), _status)
})
}



fun `firstSeenReplayCoupleCreate`(`firner`: Seqner, `dater`: Dater): FirstSeenReplayCouple {
    return FfiConverterTypeFirstSeenReplayCouple.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_first_seen_replay_couple_create(FfiConverterTypeSeqner.lower(`firner`), FfiConverterTypeDater.lower(`dater`), _status)
})
}



fun `firstSeenReplayCouplesCreate`(`value`: List<FirstSeenReplayCouple>): FirstSeenReplayCouples {
    return FfiConverterTypeFirstSeenReplayCouples.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_first_seen_replay_couples_create(FfiConverterSequenceTypeFirstSeenReplayCouple.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `firstSeenReplayCouplesQb64`(`firstSeenReplayCouples`: FirstSeenReplayCouples): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_first_seen_replay_couples_qb64(FfiConverterTypeFirstSeenReplayCouples.lower(`firstSeenReplayCouples`), _status)
})
}


@Throws(ParsideException::class)

fun `firstSeenReplayCouplesQb64b`(`firstSeenReplayCouples`: FirstSeenReplayCouples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_first_seen_replay_couples_qb64b(FfiConverterTypeFirstSeenReplayCouples.lower(`firstSeenReplayCouples`), _status)
})
}


@Throws(ParsideException::class)

fun `firstSeenReplayCouplesQb2`(`firstSeenReplayCouples`: FirstSeenReplayCouples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_first_seen_replay_couples_qb2(FfiConverterTypeFirstSeenReplayCouples.lower(`firstSeenReplayCouples`), _status)
})
}



fun `nonTransReceiptCoupleCreate`(`cigar`: Cigar): NonTransReceiptCouple {
    return FfiConverterTypeNonTransReceiptCouple.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_non_trans_receipt_couple_create(FfiConverterTypeCigar.lower(`cigar`), _status)
})
}



fun `nonTransReceiptCouplesCreate`(`value`: List<NonTransReceiptCouple>): NonTransReceiptCouples {
    return FfiConverterTypeNonTransReceiptCouples.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_non_trans_receipt_couples_create(FfiConverterSequenceTypeNonTransReceiptCouple.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `nonTransReceiptCouplesQb64`(`nonTransReceiptCouples`: NonTransReceiptCouples): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_non_trans_receipt_couples_qb64(FfiConverterTypeNonTransReceiptCouples.lower(`nonTransReceiptCouples`), _status)
})
}


@Throws(ParsideException::class)

fun `nonTransReceiptCouplesQb64b`(`nonTransReceiptCouples`: NonTransReceiptCouples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_non_trans_receipt_couples_qb64b(FfiConverterTypeNonTransReceiptCouples.lower(`nonTransReceiptCouples`), _status)
})
}


@Throws(ParsideException::class)

fun `nonTransReceiptCouplesQb2`(`nonTransReceiptCouples`: NonTransReceiptCouples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_non_trans_receipt_couples_qb2(FfiConverterTypeNonTransReceiptCouples.lower(`nonTransReceiptCouples`), _status)
})
}



fun `pathedMaterialQuadletCreate`(`siger`: Siger): PathedMaterialQuadlet {
    return FfiConverterTypePathedMaterialQuadlet.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_pathed_material_quadlet_create(FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `pathedMaterialQuadletsCreate`(`value`: List<PathedMaterialQuadlet>): PathedMaterialQuadlets {
    return FfiConverterTypePathedMaterialQuadlets.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_pathed_material_quadlets_create(FfiConverterSequenceTypePathedMaterialQuadlet.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `pathedMaterialQuadletsQb64`(`pathedMaterialQuadlets`: PathedMaterialQuadlets): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_pathed_material_quadlets_qb64(FfiConverterTypePathedMaterialQuadlets.lower(`pathedMaterialQuadlets`), _status)
})
}


@Throws(ParsideException::class)

fun `pathedMaterialQuadletsQb64b`(`pathedMaterialQuadlets`: PathedMaterialQuadlets): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_pathed_material_quadlets_qb64b(FfiConverterTypePathedMaterialQuadlets.lower(`pathedMaterialQuadlets`), _status)
})
}


@Throws(ParsideException::class)

fun `pathedMaterialQuadletsQb2`(`pathedMaterialQuadlets`: PathedMaterialQuadlets): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_pathed_material_quadlets_qb2(FfiConverterTypePathedMaterialQuadlets.lower(`pathedMaterialQuadlets`), _status)
})
}



fun `sadPathSigCreate`(`siger`: Siger): SadPathSig {
    return FfiConverterTypeSadPathSig.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sig_create(FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `sadPathSigsCreate`(`value`: List<SadPathSig>): SadPathSigs {
    return FfiConverterTypeSadPathSigs.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sigs_create(FfiConverterSequenceTypeSadPathSig.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `sadPathSigsQb64`(`sadPathSigs`: SadPathSigs): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sigs_qb64(FfiConverterTypeSadPathSigs.lower(`sadPathSigs`), _status)
})
}


@Throws(ParsideException::class)

fun `sadPathSigsQb64b`(`sadPathSigs`: SadPathSigs): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sigs_qb64b(FfiConverterTypeSadPathSigs.lower(`sadPathSigs`), _status)
})
}


@Throws(ParsideException::class)

fun `sadPathSigsQb2`(`sadPathSigs`: SadPathSigs): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sigs_qb2(FfiConverterTypeSadPathSigs.lower(`sadPathSigs`), _status)
})
}



fun `sadPathSigGroupCreate`(`siger`: Siger): SadPathSigGroup {
    return FfiConverterTypeSadPathSigGroup.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sig_group_create(FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `sadPathSigGroupsCreate`(`value`: List<SadPathSigGroup>): SadPathSigGroups {
    return FfiConverterTypeSadPathSigGroups.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sig_groups_create(FfiConverterSequenceTypeSadPathSigGroup.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `sadPathSigGroupsQb64`(`sadPathSigGroup`: SadPathSigGroups): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sig_groups_qb64(FfiConverterTypeSadPathSigGroups.lower(`sadPathSigGroup`), _status)
})
}


@Throws(ParsideException::class)

fun `sadPathSigGroupsQb64b`(`sadPathSigGroup`: SadPathSigGroups): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sig_groups_qb64b(FfiConverterTypeSadPathSigGroups.lower(`sadPathSigGroup`), _status)
})
}


@Throws(ParsideException::class)

fun `sadPathSigGroupsQb2`(`sadPathSigGroup`: SadPathSigGroups): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_sad_path_sig_groups_qb2(FfiConverterTypeSadPathSigGroups.lower(`sadPathSigGroup`), _status)
})
}



fun `sealSourceCoupleCreate`(`seqner`: Seqner, `saider`: Saider): SealSourceCouple {
    return FfiConverterTypeSealSourceCouple.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seal_source_couple_create(FfiConverterTypeSeqner.lower(`seqner`), FfiConverterTypeSaider.lower(`saider`), _status)
})
}



fun `sealSourceCouplesCreate`(`value`: List<SealSourceCouple>): SealSourceCouples {
    return FfiConverterTypeSealSourceCouples.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seal_source_couples_create(FfiConverterSequenceTypeSealSourceCouple.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `sealSourceCouplesQb64`(`sealSourceCouples`: SealSourceCouples): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seal_source_couples_qb64(FfiConverterTypeSealSourceCouples.lower(`sealSourceCouples`), _status)
})
}


@Throws(ParsideException::class)

fun `sealSourceCouplesQb64b`(`sealSourceCouples`: SealSourceCouples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seal_source_couples_qb64b(FfiConverterTypeSealSourceCouples.lower(`sealSourceCouples`), _status)
})
}


@Throws(ParsideException::class)

fun `sealSourceCouplesQb2`(`sealSourceCouples`: SealSourceCouples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_seal_source_couples_qb2(FfiConverterTypeSealSourceCouples.lower(`sealSourceCouples`), _status)
})
}



fun `transIdxSigGroupCreate`(`prefixer`: Prefixer, `seqner`: Seqner, `saider`: Saider, `isigers`: ControllerIdxSigs): TransIdxSigGroup {
    return FfiConverterTypeTransIdxSigGroup.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_idx_sig_group_create(FfiConverterTypePrefixer.lower(`prefixer`), FfiConverterTypeSeqner.lower(`seqner`), FfiConverterTypeSaider.lower(`saider`), FfiConverterTypeControllerIdxSigs.lower(`isigers`), _status)
})
}



fun `transIdxSigGroupsCreate`(`value`: List<TransIdxSigGroup>): TransIdxSigGroups {
    return FfiConverterTypeTransIdxSigGroups.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_idx_sig_groups_create(FfiConverterSequenceTypeTransIdxSigGroup.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `transIdxSigGroupsQb64`(`transIdxSigGroups`: TransIdxSigGroups): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_idx_sig_groups_qb64(FfiConverterTypeTransIdxSigGroups.lower(`transIdxSigGroups`), _status)
})
}


@Throws(ParsideException::class)

fun `transIdxSigGroupsQb64b`(`transIdxSigGroups`: TransIdxSigGroups): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_idx_sig_groups_qb64b(FfiConverterTypeTransIdxSigGroups.lower(`transIdxSigGroups`), _status)
})
}


@Throws(ParsideException::class)

fun `transIdxSigGroupsQb2`(`transIdxSigGroups`: TransIdxSigGroups): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_idx_sig_groups_qb2(FfiConverterTypeTransIdxSigGroups.lower(`transIdxSigGroups`), _status)
})
}



fun `transLastIdxSigGroupCreate`(`prefixer`: Prefixer, `isigers`: ControllerIdxSigs): TransLastIdxSigGroup {
    return FfiConverterTypeTransLastIdxSigGroup.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_last_idx_sig_group_create(FfiConverterTypePrefixer.lower(`prefixer`), FfiConverterTypeControllerIdxSigs.lower(`isigers`), _status)
})
}



fun `transLastIdxSigGroupsCreate`(`value`: List<TransLastIdxSigGroup>): TransLastIdxSigGroups {
    return FfiConverterTypeTransLastIdxSigGroups.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_last_idx_sig_groups_create(FfiConverterSequenceTypeTransLastIdxSigGroup.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `transLastIdxSigGroupsQb64`(`transLastIdxSigGroups`: TransLastIdxSigGroups): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_last_idx_sig_groups_qb64(FfiConverterTypeTransLastIdxSigGroups.lower(`transLastIdxSigGroups`), _status)
})
}


@Throws(ParsideException::class)

fun `transLastIdxSigGroupsQb64b`(`transLastIdxSigGroups`: TransLastIdxSigGroups): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_last_idx_sig_groups_qb64b(FfiConverterTypeTransLastIdxSigGroups.lower(`transLastIdxSigGroups`), _status)
})
}


@Throws(ParsideException::class)

fun `transLastIdxSigGroupsQb2`(`transLastIdxSigGroups`: TransLastIdxSigGroups): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_last_idx_sig_groups_qb2(FfiConverterTypeTransLastIdxSigGroups.lower(`transLastIdxSigGroups`), _status)
})
}



fun `transReceiptQuadrupleCreate`(`prefixer`: Prefixer, `seqner`: Seqner, `saider`: Saider, `siger`: Siger): TransReceiptQuadruple {
    return FfiConverterTypeTransReceiptQuadruple.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_receipt_quadruple_create(FfiConverterTypePrefixer.lower(`prefixer`), FfiConverterTypeSeqner.lower(`seqner`), FfiConverterTypeSaider.lower(`saider`), FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `transReceiptQuadruplesCreate`(`value`: List<TransReceiptQuadruple>): TransReceiptQuadruples {
    return FfiConverterTypeTransReceiptQuadruples.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_receipt_quadruples_create(FfiConverterSequenceTypeTransReceiptQuadruple.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `transReceiptQuadruplesQb64`(`transReceiptQuadruples`: TransReceiptQuadruples): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_receipt_quadruples_qb64(FfiConverterTypeTransReceiptQuadruples.lower(`transReceiptQuadruples`), _status)
})
}


@Throws(ParsideException::class)

fun `transReceiptQuadruplesQb64b`(`transReceiptQuadruples`: TransReceiptQuadruples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_receipt_quadruples_qb64b(FfiConverterTypeTransReceiptQuadruples.lower(`transReceiptQuadruples`), _status)
})
}


@Throws(ParsideException::class)

fun `transReceiptQuadruplesQb2`(`transReceiptQuadruples`: TransReceiptQuadruples): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_trans_receipt_quadruples_qb2(FfiConverterTypeTransReceiptQuadruples.lower(`transReceiptQuadruples`), _status)
})
}



fun `witnessIdsSigCreate`(`siger`: Siger): WitnessIdxSig {
    return FfiConverterTypeWitnessIdxSig.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_witness_ids_sig_create(FfiConverterTypeSiger.lower(`siger`), _status)
})
}



fun `witnessIdsSigsCreate`(`value`: List<WitnessIdxSig>): WitnessIdxSigs {
    return FfiConverterTypeWitnessIdxSigs.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_witness_ids_sigs_create(FfiConverterSequenceTypeWitnessIdxSig.lower(`value`), _status)
})
}


@Throws(ParsideException::class)

fun `witnessIdsSigsQb64`(`witnessIdsSigs`: WitnessIdxSigs): String {
    return FfiConverterString.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_witness_ids_sigs_qb64(FfiConverterTypeWitnessIdxSigs.lower(`witnessIdsSigs`), _status)
})
}


@Throws(ParsideException::class)

fun `witnessIdsSigsQb64b`(`witnessIdsSigs`: WitnessIdxSigs): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_witness_ids_sigs_qb64b(FfiConverterTypeWitnessIdxSigs.lower(`witnessIdsSigs`), _status)
})
}


@Throws(ParsideException::class)

fun `witnessIdsSigsQb2`(`witnessIdsSigs`: WitnessIdxSigs): List<UByte> {
    return FfiConverterSequenceUByte.lift(
    rustCallWithError(ParsideException) { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_witness_ids_sigs_qb2(FfiConverterTypeWitnessIdxSigs.lower(`witnessIdsSigs`), _status)
})
}



fun `matterCodexCode`(`codex`: MatterCodex): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_matter_codex_code(FfiConverterTypeMatterCodex.lower(`codex`), _status)
})
}



fun `indexerCodexCode`(`codex`: IndexerCodex): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.cesrox_daf_indexer_codex_code(FfiConverterTypeIndexerCodex.lower(`codex`), _status)
})
}




