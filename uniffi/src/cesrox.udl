[Error]
enum CesrError {
    "SerializationError",
    "JSONSerializationError",
    "CBORSerializationError",
    "MsgPackSerializationError",
    "IntegerParseValue",
    "SemanticError",
    "FaultySignatureVerification",
    "EventOutOfOrderError",
    "EventDuplicateError",
    "NotEnoughSigsError",
    "SignatureVerificationError",
    "DeserializeError",
    "NotIndexedError",
    "IdentifierPresentError",
    "Base64DecodingError",
    "ImproperPrefixType",
    "StorageError",
    "InvalidIdentifierStat",
    "MutArcKeyVaultError",
    "Ed25519DalekSignatureError",
    "MutexPoisoned",
    "IncorrectDigest",
    "StreamDeserializationError",
    "NotImplementedError",
    "EmptyBytesStream",
    "NotExist",
    "InvalidState",
    "Incomplete",
    "TooMuch",
};

enum BasicCode {
    "ECDSAsecp256k1NT",
    "ECDSAsecp256k1",
    "Ed25519NT",
    "Ed25519",
    "Ed448NT",
    "Ed448",
    "X25519",
    "X448",
};

dictionary Key {
  sequence<u8> value;
};

dictionary BasicPrefix {
  BasicCode derivation;
  Key public_key;
};

enum SelfSigningCode {
    "Ed25519Sha512",
    "ECDSAsecp256k1Sha256",
    "Ed448",
};

dictionary SelfSigningPrefix {
  SelfSigningCode derivation;
  sequence<u8> signature;
};

[Enum]
interface SelfAddressingCode {
    Blake3_256();
    Blake2B256(sequence<u8> key);
    Blake2S256(sequence<u8> key);
    SHA3_256();
    SHA2_256();
    Blake3_512();
    SHA3_512();
    Blake2B512();
    SHA2_512();
};

dictionary SelfAddressingPrefix {
  SelfAddressingCode derivation;
  sequence<u8> digest;
};

dictionary AttachedSignaturePrefix {
  SelfSigningPrefix signature;
  u16 index;
};

dictionary IndexedControllerSignatures {
  sequence<AttachedSignaturePrefix> value;
};

dictionary IndexedWitnessSignatures {
  sequence<AttachedSignaturePrefix> value;
};

dictionary NontransferableIdentifierReceiptCouple {
  BasicPrefix basic;
  SelfSigningPrefix self_signing;
};

dictionary NontransferableIdentifierReceiptCouples {
  sequence<NontransferableIdentifierReceiptCouple> value;
};

dictionary SourceSeal {
  u64 sn;
  SelfAddressingPrefix digest;
};

dictionary SealSourceCouplets {
  sequence<SourceSeal> value;
};

[Enum]
interface IdentifierPrefix {
    BasicIdentifier(BasicPrefix value);
    SelfAddressingIdentifier(SelfAddressingPrefix value);
    SelfSigningIdentifier(SelfSigningPrefix value);
};

dictionary EventSeal {
  IdentifierPrefix prefix;
  u64 sn;
  SelfAddressingPrefix event_digest;
};

dictionary TransferableIndexedSignaturesGroup {
  EventSeal event_seal;
  sequence<AttachedSignaturePrefix> signature_prefixes;
};

dictionary TransferableIndexedSignaturesGroups {
  sequence<TransferableIndexedSignaturesGroup> value;
};

dictionary LastEstSignaturesGroup {
  IdentifierPrefix identifier_prefix;
  sequence<AttachedSignaturePrefix> attached_signature_prefixes;
};

dictionary LastEstSignaturesGroups {
  sequence<LastEstSignaturesGroup> value;
};

dictionary Frame {
  sequence<CesrGroup> value;
};

[Custom]
typedef string JsonValue;

dictionary CustomMessage {
  JsonValue value;
};

[Enum]
interface CesrGroup {
    IndexedControllerSignaturesVariant(IndexedControllerSignatures value);
    IndexedWitnessSignaturesVariant(IndexedWitnessSignatures value);
    NontransferableIdentifierReceiptCouplesVariant(NontransferableIdentifierReceiptCouples value);
    SealSourceCoupletsVariant(SealSourceCouplets value);
    TransferableIndexedSignaturesGroupsVariant(TransferableIndexedSignaturesGroups value);
    LastEstSignaturesGroupsVariant(LastEstSignaturesGroups value);
    FrameVariant(Frame value);
};

[Enum]
interface Message {
    CustomMessageVariant(CustomMessage value);
    CesrGroupVariant(CesrGroup value);
};

dictionary MessageList {
  sequence<Message> messages;
};

dictionary MessageFromStreamResult {
  sequence<u8> rest;
  Message message;
};

dictionary MessageListFromStreamResult {
  sequence<u8> rest;
  MessageList messages;
};

dictionary BasicPrefixFromStreamResult {
  sequence<u8> rest;
  BasicPrefix message;
};

dictionary SelfSigningPrefixFromStreamResult {
  sequence<u8> rest;
  SelfSigningPrefix message;
};

dictionary SelfAddressingPrefixFromStreamResult {
  sequence<u8> rest;
  SelfAddressingPrefix message;
};

dictionary AttachedSignaturePrefixFromStreamResult {
  sequence<u8> rest;
  AttachedSignaturePrefix message;
};

dictionary IndexedControllerSignaturesFromStreamResult {
  sequence<u8> rest;
  IndexedControllerSignatures message;
};

dictionary IndexedWitnessSignaturesFromStreamResult {
  sequence<u8> rest;
  IndexedWitnessSignatures message;
};

dictionary NontransferableIdentifierReceiptCouplesFromStreamResult {
  sequence<u8> rest;
  NontransferableIdentifierReceiptCouples message;
};

dictionary SealSourceCoupletsFromStreamResult {
  sequence<u8> rest;
  SealSourceCouplets message;
};

dictionary TransferableIndexedSignaturesGroupsFromStreamResult {
  sequence<u8> rest;
  TransferableIndexedSignaturesGroups message;
};

dictionary LastEstSignaturesGroupsFromStreamResult {
  sequence<u8> rest;
  LastEstSignaturesGroups message;
};

dictionary FrameFromStreamResult {
  sequence<u8> rest;
  Frame message;
};

namespace cesrox {
    [Throws=CesrError]
    Message message_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    MessageFromStreamResult message_from_stream_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    sequence<u8> message_to_bytes([ByRef] Message message);
    [Throws=CesrError]
    string message_to_str([ByRef] Message message);
    [Throws=CesrError]
    Message message_from_str([ByRef] string value);

    [Throws=CesrError]
    MessageList message_list_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    MessageListFromStreamResult message_list_from_stream_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    sequence<u8> message_list_to_bytes([ByRef] MessageList message_list);
    [Throws=CesrError]
    string message_list_to_str([ByRef] MessageList message_list);
    [Throws=CesrError]
    MessageList message_list_from_str([ByRef] string value);

    Key key_create([ByRef] sequence<u8> value);

    BasicPrefix basic_prefix_create(BasicCode code, Key public_key);
    string basic_prefix_to_str([ByRef] BasicPrefix basic_prefix);
    [Throws=CesrError]
    BasicPrefix basic_prefix_from_str([ByRef] string str);
    sequence<u8> basic_prefix_to_bytes([ByRef] BasicPrefix basic_prefix);
    [Throws=CesrError]
    BasicPrefix basic_prefix_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    BasicPrefixFromStreamResult basic_prefix_from_stream_bytes([ByRef] sequence<u8> bytes);

    SelfSigningPrefix self_signing_prefix_create(SelfSigningCode code, sequence<u8> signature);
    string self_signing_prefix_to_str([ByRef] SelfSigningPrefix self_signing_prefix);
    [Throws=CesrError]
    SelfSigningPrefix self_signing_prefix_from_str([ByRef] string str);
    sequence<u8> self_signing_prefix_to_bytes([ByRef] SelfSigningPrefix self_signing_prefix);
    [Throws=CesrError]
    SelfSigningPrefix self_signing_prefix_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    SelfSigningPrefixFromStreamResult self_signing_prefix_from_stream_bytes([ByRef] sequence<u8> bytes);

    SelfAddressingPrefix self_addressing_prefix_create(SelfAddressingCode code, sequence<u8> digest);
    string self_addressing_prefix_to_str([ByRef] SelfAddressingPrefix self_addressing_prefix);
    [Throws=CesrError]
    SelfAddressingPrefix self_addressing_prefix_from_str([ByRef] string str);
    sequence<u8> self_addressing_prefix_to_bytes([ByRef] SelfAddressingPrefix self_addressing_prefix);
    [Throws=CesrError]
    SelfAddressingPrefix self_addressing_prefix_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    SelfAddressingPrefixFromStreamResult self_addressing_prefix_from_stream_bytes([ByRef] sequence<u8> bytes);

    AttachedSignaturePrefix attached_signature_prefix_create(SelfSigningPrefix signature, u16 index);
    string attached_signature_prefix_to_str([ByRef] AttachedSignaturePrefix attached_signature_prefix);
    [Throws=CesrError]
    AttachedSignaturePrefix attached_signature_prefix_from_str([ByRef] string str);
    sequence<u8> attached_signature_prefix_to_bytes([ByRef] AttachedSignaturePrefix attached_signature_prefix);
    [Throws=CesrError]
    AttachedSignaturePrefix attached_signature_prefix_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    AttachedSignaturePrefixFromStreamResult attached_signature_prefix_from_stream_bytes([ByRef] sequence<u8> bytes);

    IndexedControllerSignatures indexed_controller_signatures_create(sequence<AttachedSignaturePrefix> value);
    string indexed_controller_signatures_to_str([ByRef] IndexedControllerSignatures indexed_controller_signatures);
    [Throws=CesrError]
    IndexedControllerSignatures indexed_controller_signatures_from_str([ByRef] string str);
    sequence<u8> indexed_controller_signatures_to_bytes([ByRef] IndexedControllerSignatures indexed_controller_signatures);
    [Throws=CesrError]
    IndexedControllerSignatures indexed_controller_signatures_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    IndexedControllerSignaturesFromStreamResult indexed_controller_signatures_from_stream_bytes([ByRef] sequence<u8> bytes);

    IndexedWitnessSignatures witness_controller_signatures_create(sequence<AttachedSignaturePrefix> value);
    string witness_controller_signatures_to_str([ByRef] IndexedWitnessSignatures witness_controller_signatures);
    [Throws=CesrError]
    IndexedWitnessSignatures witness_controller_signatures_from_str([ByRef] string str);
    sequence<u8> witness_controller_signatures_to_bytes([ByRef] IndexedWitnessSignatures witness_controller_signatures);
    [Throws=CesrError]
    IndexedWitnessSignatures witness_controller_signatures_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    IndexedWitnessSignaturesFromStreamResult witness_controller_signatures_from_stream_bytes([ByRef] sequence<u8> bytes);

    NontransferableIdentifierReceiptCouple non_transferable_identifier_receipt_couple_create(BasicPrefix basic, SelfSigningPrefix self_signing);

    NontransferableIdentifierReceiptCouples non_transferable_identifier_receipt_couples_create(sequence<NontransferableIdentifierReceiptCouple> value);
    string non_transferable_identifier_receipt_couples_to_str([ByRef] NontransferableIdentifierReceiptCouples non_transferable_identifier_receipt_couples);
    [Throws=CesrError]
    NontransferableIdentifierReceiptCouples non_transferable_identifier_receipt_couples_from_str([ByRef] string str);
    sequence<u8> non_transferable_identifier_receipt_couples_to_bytes([ByRef] NontransferableIdentifierReceiptCouples non_transferable_identifier_receipt_couples);
    [Throws=CesrError]
    NontransferableIdentifierReceiptCouples non_transferable_identifier_receipt_couples_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    NontransferableIdentifierReceiptCouplesFromStreamResult non_transferable_identifier_receipt_couples_from_stream_bytes([ByRef] sequence<u8> bytes);

    SourceSeal source_seal_create(u64 sn, SelfAddressingPrefix digest);

    SealSourceCouplets seal_source_couplets_create(sequence<SourceSeal> value);
    string seal_source_couplets_to_str([ByRef] SealSourceCouplets seal_source_couplets);
    [Throws=CesrError]
    SealSourceCouplets seal_source_couplets_from_str([ByRef] string str);
    sequence<u8> seal_source_couplets_to_bytes([ByRef] SealSourceCouplets seal_source_couplets);
    [Throws=CesrError]
    SealSourceCouplets seal_source_couplets_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    SealSourceCoupletsFromStreamResult seal_source_couplets_from_stream_bytes([ByRef] sequence<u8> bytes);

    EventSeal event_seal_create(IdentifierPrefix prefix, u64 sn, SelfAddressingPrefix event_digest);

    TransferableIndexedSignaturesGroup transferable_indexed_signatures_group_create(EventSeal event_seal, sequence<AttachedSignaturePrefix> signature_prefixes);

    TransferableIndexedSignaturesGroups transferable_indexed_signatures_groups_create(sequence<TransferableIndexedSignaturesGroup> value);
    string transferable_indexed_signatures_groups_to_str([ByRef] TransferableIndexedSignaturesGroups transferable_indexed_signatures_groups);
    [Throws=CesrError]
    TransferableIndexedSignaturesGroups transferable_indexed_signatures_groups_from_str([ByRef] string str);
    sequence<u8> transferable_indexed_signatures_groups_to_bytes([ByRef] TransferableIndexedSignaturesGroups transferable_indexed_signatures_groups);
    [Throws=CesrError]
    TransferableIndexedSignaturesGroups transferable_indexed_signatures_groups_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    TransferableIndexedSignaturesGroupsFromStreamResult transferable_indexed_signatures_groups_from_stream_bytes([ByRef] sequence<u8> bytes);

    LastEstSignaturesGroup last_est_signatures_group_create(IdentifierPrefix identifier_prefix, sequence<AttachedSignaturePrefix> attached_signature_prefixes);

    LastEstSignaturesGroups last_est_signatures_groups_create(sequence<LastEstSignaturesGroup> value);
    string last_est_signatures_groups_to_str([ByRef] LastEstSignaturesGroups last_est_signatures_group);
    [Throws=CesrError]
    LastEstSignaturesGroups last_est_signatures_groups_from_str([ByRef] string str);
    sequence<u8> last_est_signatures_groups_to_bytes([ByRef] LastEstSignaturesGroups last_est_signatures_groups);
    [Throws=CesrError]
    LastEstSignaturesGroups last_est_signatures_groups_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    LastEstSignaturesGroupsFromStreamResult last_est_signatures_groups_from_stream_bytes([ByRef] sequence<u8> bytes);

    Frame frame_create(sequence<CesrGroup> value);
    string frame_to_str([ByRef] Frame frame);
    [Throws=CesrError]
    Frame frame_from_str([ByRef] string str);
    sequence<u8> frame_to_bytes([ByRef] Frame frame);
    [Throws=CesrError]
    Frame frame_from_bytes([ByRef] sequence<u8> bytes);
    [Throws=CesrError]
    FrameFromStreamResult frame_from_stream_bytes([ByRef] sequence<u8> bytes);

};
